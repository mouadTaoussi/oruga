// vite.config.js
import { defineConfig } from "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/node_modules/vite/dist/node/index.js";
import vue from "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import tsconfigPaths from "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/node_modules/vite-tsconfig-paths/dist/index.mjs";
import dts from "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/node_modules/vite-plugin-dts/dist/index.mjs";
import babel from "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/node_modules/@rollup/plugin-babel/dist/es/index.js";

// package.json
var version = "0.8.8";
var peerDependencies = {
  vue: "^3.0.0"
};

// vite.config.js
import fs from "fs";
import path, { resolve } from "path";
import { fileURLToPath } from "url";
var __vite_injected_original_dirname = "C:\\Users\\HP\\Desktop\\Developement\\Open source\\oruga\\packages\\oruga";
var __vite_injected_original_import_meta_url = "file:///C:/Users/HP/Desktop/Developement/Open%20source/oruga/packages/oruga/vite.config.js";
var bannerTxt = `/*! Oruga v${version} | MIT License | github.com/oruga-ui/oruga */`;
var baseFolder = "./src/components/";
var components = fs.readdirSync(baseFolder).filter((f) => fs.statSync(path.join(baseFolder, f)).isDirectory()).filter((f) => !f.includes("utils"));
var entries = {
  index: resolve(__vite_injected_original_dirname, "./src/index.ts"),
  helpers: resolve(__vite_injected_original_dirname, "./src/utils/helpers.ts"),
  config: resolve(__vite_injected_original_dirname, "./src/utils/config.ts"),
  ...components.reduce((obj, name) => {
    obj[name] = resolve(__vite_injected_original_dirname, baseFolder + name);
    return obj;
  }, {})
};
var vite_config_default = defineConfig(({ mode }) => ({
  root: __vite_injected_original_dirname,
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    open: true,
    port: 3e3
  },
  build: {
    emptyOutDir: false,
    sourcemap: true,
    minify: mode === "minify",
    lib: mode === "minify" ? (
      // build minified version with index.ts entry
      {
        name: "Oruga",
        entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
        formats: ["umd", "es"],
        fileName: (format) => format === "umd" ? "oruga.js" : "oruga.mjs"
      }
    ) : (
      // build rollup output verions for all entries
      {
        name: "Oruga",
        entry: entries
      }
    ),
    rollupOptions: {
      // make sure to externalize deps that shouldn't be bundled
      // into your library
      external: [...Object.keys(peerDependencies)],
      output: mode === "minify" ? (
        // Browser build minified version
        {
          banner: bannerTxt,
          exports: "named",
          // Provide global variables to use in the UMD build
          // for externalized deps
          globals: {
            vue: "Vue"
          }
        }
      ) : [
        // ESM build
        {
          format: "esm",
          dir: "dist/esm",
          entryFileNames: "[name].mjs",
          chunkFileNames: "[name]-[hash].mjs",
          banner: bannerTxt,
          globals: {
            vue: "Vue"
          }
        },
        // SSR build
        {
          format: "cjs",
          dir: "dist/cjs",
          exports: "named",
          banner: bannerTxt,
          globals: {
            vue: "Vue"
          }
        }
      ],
      // rollup plugins
      plugins: [
        babel({
          babelHelpers: "bundled"
        })
      ]
    }
  },
  plugins: [tsconfigPaths(), vue(), dts({ outDir: "./dist/types" })],
  test: {
    setupFiles: [resolve("./src/__tests__/vitest.setup.ts")],
    environment: "jsdom",
    coverage: {
      provider: "istanbul"
    }
  }
}));
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
